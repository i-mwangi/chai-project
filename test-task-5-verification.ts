#!/usr/bin/env node
/**
 * Verification script for Task 5: Integrate migration runner into server startup
 * 
 * This script verifies all sub-tasks:
 * 1. Migration runner is imported and called on server startup
 * 2. Logging for migration status is present
 * 3. Server startup is prevented if critical migrations fail
 * 4. Health check endpoint at /api/health is available
 */

import { readFileSync } from 'fs'
import { runMigrations } from './db/migrate'
import { runHealthCheck } from './db/health-check'

async function verifyTask5() {
    console.log('üß™ Verifying Task 5: Integrate migration runner into server startup\n')

    let allTestsPassed = true

    // Sub-task 1: Verify migration runner is imported
    console.log('‚úì Sub-task 1: Verify migration runner is imported in server.ts')
    const serverCode = readFileSync('./api/server.ts', 'utf-8')

    if (serverCode.includes("import { runMigrations } from '../db/migrate'")) {
        console.log('  ‚úÖ Migration runner is imported')
    } else {
        console.log('  ‚ùå Migration runner import not found')
        allTestsPassed = false
    }

    if (serverCode.includes("import { runHealthCheck } from '../db/health-check'")) {
        console.log('  ‚úÖ Health check is imported')
    } else {
        console.log('  ‚ùå Health check import not found')
        allTestsPassed = false
    }

    // Sub-task 2: Verify migration runner is called on startup
    console.log('\n‚úì Sub-task 2: Verify migration runner is called on server startup')

    if (serverCode.includes('await runMigrations()')) {
        console.log('  ‚úÖ Migration runner is called on startup')
    } else {
        console.log('  ‚ùå Migration runner call not found')
        allTestsPassed = false
    }

    if (serverCode.includes('async function startServer()')) {
        console.log('  ‚úÖ Server startup is wrapped in async function')
    } else {
        console.log('  ‚ùå Async server startup function not found')
        allTestsPassed = false
    }

    // Sub-task 3: Verify logging for migration status
    console.log('\n‚úì Sub-task 3: Verify logging for migration status')

    if (serverCode.includes('Running database migrations')) {
        console.log('  ‚úÖ Migration start logging present')
    } else {
        console.log('  ‚ùå Migration start logging not found')
        allTestsPassed = false
    }

    if (serverCode.includes('Successfully ran') && serverCode.includes('migrations')) {
        console.log('  ‚úÖ Migration success logging present')
    } else {
        console.log('  ‚ùå Migration success logging not found')
        allTestsPassed = false
    }

    if (serverCode.includes('No pending migrations')) {
        console.log('  ‚úÖ No pending migrations logging present')
    } else {
        console.log('  ‚ùå No pending migrations logging not found')
        allTestsPassed = false
    }

    // Sub-task 4: Verify server startup prevention on migration failure
    console.log('\n‚úì Sub-task 4: Verify server startup is prevented if migrations fail')

    if (serverCode.includes('process.exit(1)') && serverCode.includes('Critical migrations failed')) {
        console.log('  ‚úÖ Server exits on critical migration failure')
    } else {
        console.log('  ‚ùå Server exit on migration failure not found')
        allTestsPassed = false
    }

    if (serverCode.includes('Migration errors:')) {
        console.log('  ‚úÖ Migration error logging present')
    } else {
        console.log('  ‚ùå Migration error logging not found')
        allTestsPassed = false
    }

    // Sub-task 5: Verify health check endpoint
    console.log('\n‚úì Sub-task 5: Verify health check endpoint at /api/health')

    if (serverCode.includes("pathname === '/api/health'")) {
        console.log('  ‚úÖ Health check endpoint route defined')
    } else {
        console.log('  ‚ùå Health check endpoint route not found')
        allTestsPassed = false
    }

    if (serverCode.includes('await runHealthCheck()')) {
        console.log('  ‚úÖ Health check is called in endpoint')
    } else {
        console.log('  ‚ùå Health check call in endpoint not found')
        allTestsPassed = false
    }

    if (serverCode.includes('http://localhost:${port}/api/health')) {
        console.log('  ‚úÖ Health check endpoint logged on startup')
    } else {
        console.log('  ‚ùå Health check endpoint logging not found')
        allTestsPassed = false
    }

    // Functional tests
    console.log('\n‚úì Functional Tests')

    // Test migration runner
    console.log('  Testing migration runner...')
    const migrationResult = await runMigrations()
    if (migrationResult.success) {
        console.log('  ‚úÖ Migration runner executes successfully')
    } else {
        console.log('  ‚ùå Migration runner failed')
        allTestsPassed = false
    }

    // Test health check
    console.log('  Testing health check...')
    const healthResult = await runHealthCheck()
    if (healthResult.connection) {
        console.log('  ‚úÖ Health check executes successfully')
    } else {
        console.log('  ‚ùå Health check failed')
        allTestsPassed = false
    }

    // Summary
    console.log('\n' + '='.repeat(60))
    if (allTestsPassed) {
        console.log('‚úÖ All sub-tasks verified successfully!')
        console.log('\nTask 5 Implementation Summary:')
        console.log('  ‚úì Migration runner imported and integrated')
        console.log('  ‚úì Migrations run automatically on server startup')
        console.log('  ‚úì Comprehensive logging for migration status')
        console.log('  ‚úì Server exits if critical migrations fail')
        console.log('  ‚úì Health check endpoint available at /api/health')
        console.log('  ‚úì Health check runs on startup')
        return 0
    } else {
        console.log('‚ùå Some sub-tasks failed verification')
        return 1
    }
}

verifyTask5()
    .then(exitCode => process.exit(exitCode))
    .catch(error => {
        console.error('‚ùå Verification failed:', error)
        process.exit(1)
    })
